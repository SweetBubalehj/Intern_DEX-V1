/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { ethers } from "ethers";
import {
  FactoryOptions,
  HardhatEthersHelpers as HardhatEthersHelpersBase,
} from "@nomiclabs/hardhat-ethers/types";

import * as Contracts from ".";

declare module "hardhat/types/runtime" {
  interface HardhatEthersHelpers extends HardhatEthersHelpersBase {
    getContractFactory(
      name: "ERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC20__factory>;
    getContractFactory(
      name: "IERC20Metadata",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20Metadata__factory>;
    getContractFactory(
      name: "IERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20__factory>;
    getContractFactory(
      name: "IInternERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IInternERC20__factory>;
    getContractFactory(
      name: "IInternExchange",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IInternExchange__factory>;
    getContractFactory(
      name: "IInternFactory",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IInternFactory__factory>;
    getContractFactory(
      name: "InternERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.InternERC20__factory>;
    getContractFactory(
      name: "InternExchange",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.InternExchange__factory>;
    getContractFactory(
      name: "InternFactory",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.InternFactory__factory>;
    getContractFactory(
      name: "Token",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Token__factory>;

    getContractAt(
      name: "ERC20",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC20>;
    getContractAt(
      name: "IERC20Metadata",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20Metadata>;
    getContractAt(
      name: "IERC20",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20>;
    getContractAt(
      name: "IInternERC20",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IInternERC20>;
    getContractAt(
      name: "IInternExchange",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IInternExchange>;
    getContractAt(
      name: "IInternFactory",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IInternFactory>;
    getContractAt(
      name: "InternERC20",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.InternERC20>;
    getContractAt(
      name: "InternExchange",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.InternExchange>;
    getContractAt(
      name: "InternFactory",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.InternFactory>;
    getContractAt(
      name: "Token",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Token>;

    // default types
    getContractFactory(
      name: string,
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<ethers.ContractFactory>;
    getContractFactory(
      abi: any[],
      bytecode: ethers.utils.BytesLike,
      signer?: ethers.Signer
    ): Promise<ethers.ContractFactory>;
    getContractAt(
      nameOrAbi: string | any[],
      address: string,
      signer?: ethers.Signer
    ): Promise<ethers.Contract>;
  }
}
